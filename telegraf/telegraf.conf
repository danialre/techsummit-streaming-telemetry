##
# telegraf.conf
#
# A simple Telegraf configuration to get you started. This is geared toward
# Cisco IOS-XE devices, but may be repurposed for other vendors.
#
# by Danial Ebling (danial@uen.org)
##
[agent]
  metric_batch_size = 5000
  metric_buffer_limit = 200000
  flush_interval = "10s"
  # set debug=false, quiet=true if not debugging
  debug = true
  quiet = false

# OpenTelemetry inputs for Cisco devices
[[inputs.cisco_telemetry_mdt]]
  transport = "grpc"
  service_address = ":57000"

  [inputs.cisco_telemetry_mdt.aliases]
    interfaces = "openconfig-interfaces:interfaces/interface/state"
    cpu = "openconfig-platform:components/component/cpu/openconfig-platform-cpu:utilization/state"
    platform-state = "openconfig-platform:components/component/state"
    optics = "openconfig-platform:components/component/openconfig-platform-transceiver:transceiver"

  # Optional: uncomment this if you are running IOS-XE 17.6 or earlier
  # [inputs.cisco_telemetry_mdt.grpc_enforcement_policy]
  #   permit_keepalive_without_calls = true
  #   keepalive_minimum_time = "4m"

# Internal stack monitoring - collect stats on Telegraf
[[inputs.internal]]
  collect_memstats = false
  [inputs.internal.tags]
    subscription = "stackhealth"

[[inputs.influxdb]]
  urls = [
    "http://influxdb:8086/debug/vars",
  ]
  [inputs.influxdb.tags]
    subscription = "stackhealth"

[[processors.converter]]
  # exclude some extra fields we aren't analyzing
  fielddrop = ["extended_alarm_alarm_info*", "ext_param_threshold_val*"]
  [processors.converter.fields]
    # convert optics *is_detected fields from a string to a boolean, since they're always true or false
    boolean = [
      "*is_detected",
      "*enabled",
      "*auto_negotiate",
      "*enable_flow_control",
      "removable",
      "empty",
      "temperature/alarm_status"]

[[processors.starlark]]
  order = 5
  source = '''
# convert metrics to a unified format
def apply(metric):
    # Openconfig (all): change port speed to an integer
    if metric.name.startswith("openconfig-interfaces/interface"):
        for _field in [f for f in metric.fields.keys() if f.endswith("port_speed")]:
            speed = metric.fields[_field]
            int_speed = 0
            if "GB" in speed:
                int_speed = 1000000000 * int(speed[6:-2])
            elif "MB" in speed:
                int_speed = 1000000 * int(speed[6:-2])
            metric.fields[_field] = int_speed
    return metric
  '''

[[outputs.influxdb]]
  alias = "metrics"
  database = "metrics"
  skip_database_creation = true
  # InfluxDB
  urls = [ "http://influxdb:8086" ]
  content_encoding = "gzip"
  timeout = "20s"
  username = "${INFLUXDB_ADMIN_USER}"
  password = "${INFLUXDB_ADMIN_PASSWORD}"
  [outputs.influxdb.tagdrop]
    # exclude "stackhealth" metrics
    subscription = ["stackhealth"]

[[outputs.influxdb]]
  alias = "stackhealth"
  database = "stackhealth"
  skip_database_creation = true
  urls = [ "http://influxdb:8086" ]
  content_encoding = "gzip"
  timeout = "20s"
  username = "${INFLUXDB_ADMIN_USER}"
  password = "${INFLUXDB_ADMIN_PASSWORD}"
  [outputs.influxdb.tagpass]
    # include only "stackhealth" metrics
    subscription = ["stackhealth"]