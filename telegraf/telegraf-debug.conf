[agent]
  metric_batch_size = 5000
  metric_buffer_limit = 20000
  flush_interval = "10s"
  debug = true
  quiet = false

######

# OpenTelemetry inputs for Cisco devices
[[inputs.cisco_telemetry_mdt]]
  transport = "grpc"
  service_address = ":57000"

  [inputs.cisco_telemetry_mdt.aliases]
    interfaces = "openconfig-interfaces:interfaces/interface/state"
    cpu = "openconfig-platform:components/component/cpu/openconfig-platform-cpu:utilization/state"
    platform-state = "openconfig-platform:components/component/state"
    transceiver = "openconfig-platform:components/component/openconfig-platform-transceiver:transceiver"

[[processors.converter]]
  # exclude some extra fields we aren't analyzing
  fieldexclude = ["extended_alarm_alarm_info*", "ext_param_threshold_val*"]
  [processors.converter.fields]
    # convert optics *is_detected fields from a string to a boolean, since they're always true or false
    boolean = [
      "*is_detected",
      "*enabled",
      "*auto_negotiate",
      "*enable_flow_control",
      "removable",
      "empty",
      "temperature/alarm_status"]

######

[[processors.starlark]]
  order = 5
  source = '''
# convert metrics to a unified format
load("time.star", "time")
def apply(metric):
    # Openconfig (all): change port speed to an integer
    if metric.name.startswith("openconfig-interfaces/interface"):
        for _field in [f for f in metric.fields.keys() if f.endswith("port_speed")]:
            speed = metric.fields[_field]
            int_speed = 0
            if "GB" in speed:
                int_speed = 1000000000 * int(speed[6:-2])
            elif "MB" in speed:
                int_speed = 1000000 * int(speed[6:-2])
            metric.fields[_field] = int_speed
    # overwrite timestamp since collector is the only device with guaranteed NTP
    metric.time = time.now().unix_nano
    return metric
  '''

[[outputs.file]]
  files = ["stdout"]
  data_format = "influx"